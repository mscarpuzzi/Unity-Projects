//
// https://github.com/SlightlyMad/AtmosphericScattering
//  Copyright(c) 2016, Michal Skalsky
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without modification,
//  are permitted provided that the following conditions are met:
//
//  1. Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//
//  3. Neither the name of the copyright holder nor the names of its contributors
//     may be used to endorse or promote products derived from this software without
//     specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT
//  SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
//  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#pragma kernel WeatherMakerSkyboxLUT
#pragma kernel WeatherMakerInscatteringLUT

RWTexture3D<float4> _WeatherMakerSkyboxLUT;
RWTexture3D<float2> _WeatherMakerSkyboxLUT2;
RWTexture3D<float4> _WeatherMakerInscatteringLUT;
RWTexture3D<float4> _WeatherMakerExtinctionLUT;

// metal does not support GetDimensions...
uniform float3 _WeatherMakerSkyboxLUT_Dimensions;
uniform float3 _WeatherMakerInscatteringLUT_Dimensions;

#define WEATHER_MAKER_COMPUTE_SHADER

#include "WeatherMakerAtmosphereShaderInclude.cginc"

//-----------------------------------------------------------------------------------------
// ScatteringOutput
//-----------------------------------------------------------------------------------------
struct WeatherMakerScatteringOutput
{
	float3 rayleigh;
	float3 mie;
};

//-----------------------------------------------------------------------------------------
// IntegrateInscattering
//-----------------------------------------------------------------------------------------
WeatherMakerScatteringOutput IntegrateInscatteringSkybox(float3 rayStart, float3 rayDir, float rayLength, float3 planetCenter, float3 lightDir)
{
	static const float sampleCount = 64;
	float3 step = rayDir * (rayLength / sampleCount);
	float stepSize = length(step);

	float2 densityCP = 0;
	float3 scatterR = 0;
	float3 scatterM = 0;

	float2 localDensity;
	float2 densityPA;

	float2 prevLocalDensity;
	float3 prevLocalInscatterR, prevLocalInscatterM;
	GetAtmosphereDensity(rayStart, planetCenter, lightDir, prevLocalDensity, densityPA);
	ComputeLocalInscattering(prevLocalDensity, densityPA, densityCP, prevLocalInscatterR, prevLocalInscatterM);

	// P - current integration point
	// C - camera position
	// A - top of the atmosphere
	UNITY_LOOP
	for (float s = 1.0; s < sampleCount; s += 1)
	{
		float3 p = rayStart + (step * s);

		GetAtmosphereDensity(p, planetCenter, lightDir, localDensity, densityPA);
		densityCP += (localDensity + prevLocalDensity) * (stepSize / 2.0);

		prevLocalDensity = localDensity;

		float3 localInscatterR, localInscatterM;
		ComputeLocalInscattering(localDensity, densityPA, densityCP, localInscatterR, localInscatterM);

		scatterR += (localInscatterR + prevLocalInscatterR) * (stepSize / 2.0);
		scatterM += (localInscatterM + prevLocalInscatterM) * (stepSize / 2.0);

		prevLocalInscatterR = localInscatterR;
		prevLocalInscatterM = localInscatterM;
	}

	WeatherMakerScatteringOutput output;
	output.rayleigh = scatterR;
	output.mie = scatterM;

	return output;
}

//-----------------------------------------------------------------------------------------
// PrecomputeLightScattering
//-----------------------------------------------------------------------------------------
void PrecomputeLightScattering(float3 rayStart, float3 rayDir, float3 stepDir, float rayLength, float3 planetCenter, float3 lightDir, uint3 coords, uint sampleCount)
{
    float stepSize = length(stepDir) * _WeatherMakerDistanceScale;
    float halfStepSize = stepSize * 0.5;
	float2 densityCP = 0;
	float3 scatterR = 0;
	float3 scatterM = 0;

	float2 localDensity;
	float2 densityPA;

	float2 prevLocalDensity;
	float3 prevLocalInscatterR, prevLocalInscatterM;
	GetAtmosphereDensity(rayStart, planetCenter, lightDir, prevLocalDensity, densityPA);
	ComputeLocalInscattering(prevLocalDensity, densityPA, densityCP, prevLocalInscatterR, prevLocalInscatterM);

	_WeatherMakerInscatteringLUT[coords] = float4(0, 0, 0, 1);
	_WeatherMakerExtinctionLUT[coords] = float4(1, 1, 1, 1);

	// P - current integration point
	// C - camera position
	// A - top of the atmosphere
	UNITY_LOOP
	for (coords.z = 1; coords.z < sampleCount; coords.z += 1)
	{
		float3 p = rayStart + (stepDir * coords.z);

		GetAtmosphereDensity(p, planetCenter, lightDir, localDensity, densityPA);
		densityCP += (localDensity + prevLocalDensity) * halfStepSize;

		prevLocalDensity = localDensity;

		float3 localInscatterR, localInscatterM;
		ComputeLocalInscattering(localDensity, densityPA, densityCP, localInscatterR, localInscatterM);

		scatterR += (localInscatterR + prevLocalInscatterR) * halfStepSize;
		scatterM += (localInscatterM + prevLocalInscatterM) * halfStepSize;

		prevLocalInscatterR = localInscatterR;
		prevLocalInscatterM = localInscatterM;

		float3 currentScatterR = scatterR;
		float3 currentScatterM = scatterM;

		// limit mie to 0.65, higher values produce artifacts in lookup textures
		ApplyPhaseFunction(currentScatterR, currentScatterM, dot(rayDir, -lightDir.xyz), min(0.65, _WeatherMakerMieG));
		float3 lightInscatter = ((currentScatterR * _WeatherMakerScatteringR.xyz) + (currentScatterM * _WeatherMakerScatteringM.xyz)) * _WeatherMakerIncomingLight.xyz;
		float3 lightExtinction = exp(-(densityCP.x * _WeatherMakerExtinctionR.xyz + densityCP.y * _WeatherMakerExtinctionM.xyz));

		_WeatherMakerInscatteringLUT[coords] = float4(lightInscatter, 1.0);
		_WeatherMakerExtinctionLUT[coords] = float4(lightExtinction, 1.0);
	}
}

//-----------------------------------------------------------------------------------------
// SkyboxLUT
//-----------------------------------------------------------------------------------------
[numthreads(1, 1, 1)]
void WeatherMakerSkyboxLUT(uint3 id : SV_DispatchThreadID)
{
	float w = _WeatherMakerSkyboxLUT_Dimensions.x;
    float h = _WeatherMakerSkyboxLUT_Dimensions.y;
    float d = _WeatherMakerSkyboxLUT_Dimensions.z;
	// _WeatherMakerSkyboxLUT.GetDimensions(w, h, d);

	// linear parameters
	float3 coords = float3(id.x / (w - 1), id.y / (h - 1), id.z / (d - 1));

	float height = coords.x * coords.x * _WeatherMakerAtmosphereHeight;
	float ch = -(sqrt(height * (2 * _WeatherMakerAtmospherePlanetRadius + height)) / (_WeatherMakerAtmospherePlanetRadius + height));
	float viewZenithAngle = coords.y;

	viewZenithAngle = lerp
	(
		ch - pow(viewZenithAngle * 2, 5) * (1 + ch),
		ch + pow((viewZenithAngle - 0.5) * 2, 5) * (1 - ch),
		viewZenithAngle > 0.5
	);

	float sunZenithAngle = (tan((2 * coords.z - 1 + 0.26)*0.75)) / (tan(1.26 * 0.75));// coords.z * 2.0 - 1.0;
	float3 planetCenter = ATMOSPHERE_PLANET_CENTER;
	float3 rayStart = float3(WEATHER_MAKER_CAMERA_POS.x, height, WEATHER_MAKER_CAMERA_POS.z);

	float3 rayDir = float3(sqrt(saturate(1 - viewZenithAngle * viewZenithAngle)), viewZenithAngle, 0);
	float3 lightDir = -float3(sqrt(saturate(1 - sunZenithAngle * sunZenithAngle)), sunZenithAngle, 0);

	float rayLength = 1e20;
	float2 intersection = AtmosphereRaySphereIntersection(rayStart, rayDir, planetCenter, _WeatherMakerAtmospherePlanetRadius + _WeatherMakerAtmosphereHeight);
	rayLength = intersection.y;

	intersection = AtmosphereRaySphereIntersection(rayStart, rayDir, planetCenter, _WeatherMakerAtmospherePlanetRadius);
	rayLength = lerp(rayLength, min(rayLength, intersection.x), intersection.x > 0);

	WeatherMakerScatteringOutput scattering = IntegrateInscatteringSkybox(rayStart, rayDir, rayLength, planetCenter, lightDir);

	_WeatherMakerSkyboxLUT[id.xyz] = float4(scattering.rayleigh.xyz, scattering.mie.x);

#if defined(WEATHER_MAKE_ATMOSPHERE_HIGH_QUALITY)

	_WeatherMakerSkyboxLUT2[id.xyz] = scattering.mie.yz;

#endif

}

//-----------------------------------------------------------------------------------------
// InscatteringLUT
//-----------------------------------------------------------------------------------------
[numthreads(1, 1, 1)]
void WeatherMakerInscatteringLUT(uint3 id : SV_DispatchThreadID)
{
	float w = _WeatherMakerInscatteringLUT_Dimensions.x;
    float h = _WeatherMakerInscatteringLUT_Dimensions.y;
    float d = _WeatherMakerInscatteringLUT_Dimensions.z;
	// _WeatherMakerInscatteringLUT.GetDimensions(w, h, d);

	float2 coords = float2(id.x / (w - 1), id.y / (h - 1));

    // metal bug, uint is corrupted somehow...
	uint eyeIndex = floor(_WeatherMakerStereoEyeIndex) * 4;
	float3 v1 = lerp(_WeatherMakerCameraFrustumCorners[eyeIndex + 0], _WeatherMakerCameraFrustumCorners[eyeIndex + 3], coords.x); // bottom left to bottom right
	float3 v2 = lerp(_WeatherMakerCameraFrustumCorners[eyeIndex + 1], _WeatherMakerCameraFrustumCorners[eyeIndex + 2], coords.x); // top left to top right

	float3 rayEnd = lerp(v1, v2, coords.y);
	float3 rayStart = WEATHER_MAKER_CAMERA_POS.xyz;

	float3 rayDir = rayEnd - rayStart;
	float rayLength = length(rayDir);
    float3 stepDir = rayDir / (d - 1.0);
	rayDir /= rayLength;
	rayLength = min(100000.0, rayLength);
	float3 planetCenter = ATMOSPHERE_PLANET_CENTER;
	PrecomputeLightScattering(rayStart, rayDir, stepDir, rayLength, planetCenter, _WeatherMakerSunDirectionDown, uint3(id), uint(d));
}
